Got it! I will analyze the repository at [https://github.com/galacticcouncil/sdk/](https://github.com/galacticcouncil/sdk/) and extract all public methods within the `packages/sdk` directory. The output will include:

- Full method signatures (including class and method name)
- Parameter types and return types
- A concise explanation of what each method does, based on the method logic and code structure
- The results formatted as a Markdown table

I'll notify you once the analysis is complete.

**Public Methods of `@galacticcouncil/sdk`** (in `packages/sdk`):

| Method Signature | Description |
| --- | --- |
| `Router.getPools(): Promise<PoolBase[]>` | Retrieves all on-chain liquidity pools, via the configured `poolService`. If specific pool types are set in the router options, it filters to those; otherwise returns every available pool ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=async%20getPools%28%29%3A%20Promise)) ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=)). |
| `Router.getAllAssets(): Promise<Asset[]>` | Gathers all unique assets across all pools. Internally calls `getPools()` and then collects each pool’s tokens (throwing an error if no pools are found), returning a de-duplicated list of assets ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=async%20getAllAssets%28%29%3A%20Promise)) ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=,assets%20from%20substrate%20based%20pools)). |
| `Router.getAssetPairs(asset: string): Promise<Asset[]>` | Given an asset ID, returns all other assets that can be traded with it through available pools. It validates the asset is present in the pools, computes all direct and multi-hop swap paths from that asset, and returns the set of reachable destination assets ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=const%20pools%20%3D%20await%20this)) ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=const%20,validateToken%28asset%2C%20pools)). |
| `Router.getAllPaths(assetIn: string, assetOut: string): Promise<Hop[][]>` | Computes every possible swap path (sequence of pool “hops”) to go from `assetIn` to `assetOut`. It loads all pools, ensures both assets are supported, then uses an internal route-finding algorithm (`routeSuggester`) to generate all viable paths ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=async%20getAllPaths,Hop%5B%5D%5B%5D%3E)) ([sdk/packages/sdk/src/api/Router.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/Router.ts#:~:text=const%20,validateTokenPair%28assetIn%2C%20assetOut%2C%20pools)). |
| `TradeRouter.getBestSpotPrice(assetIn: string, assetOut: string): Promise<Amount \| undefined>` | Calculates the best spot price (price of 1 unit of `assetIn` in terms of `assetOut`) across all pools. It fetches all pools and possible paths, picks the most liquid route, simulates a minimal trade (`toSellSwaps('1')`), and multiplies the segment prices to derive the composite spot price (scaled to output asset’s decimals) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=const%20paths%20%3D%20super,poolsMap%2C%20pools)) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=const%20spotPrice%20%3D%20swaps)). Returns `undefined` if no route exists. |
| `TradeRouter.getBestSell(assetIn: string, assetOut: string, amountIn: BigNumber \| number \| string): Promise<Trade>` | Alias for `getSell(...)`. Finds the optimal way to sell a given amount of `assetIn` for `assetOut` (calls `getSell` internally) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=async%20getBestSell)). |
| `TradeRouter.getSell(assetIn: string, assetOut: string, amountIn: BigNumber \| number \| string, route?: Hop[]): Promise<Trade>` | Determines the best execution for selling `amountIn` of `assetIn` into `assetOut`. It loads pools and validates the pair, then finds all swap paths via `getPaths`. If a specific `route` is provided, it calculates that route’s outcome; otherwise it evaluates all possible routes (computing output for each via `toSellSwaps`) and selects the one yielding the highest output (`findBestSellRoute`) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=if%20%28route%29%20)) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=const%20routes%20%3D%20await%20Promise)). Returns a `Trade` object detailing the best trade (including amount out, spot price, etc.), or throws a `RouteNotFound` error if no path exists ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=const%20paths%20%3D%20super,poolsMap%2C%20pools)) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=pools)). |
| `TradeRouter.getBestBuy(assetIn: string, assetOut: string, amountOut: BigNumber \| number \| string): Promise<Trade>` | Alias for `getBuy(...)`. Finds the optimal way to buy a given amount of `assetOut` using `assetIn` (calls `getBuy` internally) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=async%20getBestBuy)). |
| `TradeRouter.getBuy(assetIn: string, assetOut: string, amountOut: BigNumber \| number \| string, route?: Hop[]): Promise<Trade>` | Determines the best execution for buying `amountOut` of `assetOut` using `assetIn`. It checks all pools and paths similar to `getSell`. If a particular `route` is specified, it computes the required input for that path via `toBuySwaps`; otherwise it computes all routes’ required inputs and selects the one with the smallest input cost (`findBestBuyRoute`) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=%7D%20else%20)) ([sdk/packages/sdk/src/api/TradeRouter.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/api/TradeRouter.ts#:~:text=)). Returns a `Trade` object with the trade details (including required `amountIn`, effective spot price, etc.), or throws `RouteNotFound` if no route can produce the desired output. |
| `PoolService.assets: Asset[]` (getter) | **Property** – The list of on-chain assets cached by the service. Populated by `syncRegistry()`, it reflects the latest fetched asset metadata. If the registry hasn’t been synced yet, this will be an empty array ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=get%20assets%28%29%3A%20Asset%5B%5D%20)). |
| `PoolService.isRegistrySynced: boolean` (getter) | **Property** – Indicates whether the asset registry has been synchronized. Returns `true` if asset metadata has been fetched (i.e., if `assets` is non-empty) ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=)). |
| `PoolService.syncRegistry(external?: ExternalAsset[]): Promise<void>` | Fetches the on-chain asset registry and updates internal state. It retrieves all assets and their metadata from the chain (optionally merging in an array of `external` assets), then feeds this asset list to all underlying pool clients ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=async%20syncRegistry%28external%3F%3A%20ExternalAsset%5B%5D%29%20)). After this call, `assets` will contain the up-to-date on-chain assets. |
| `PoolService.getPools(includeOnly: PoolType[]): Promise<PoolBase[]>` | Returns the list of pools from the chain, optionally filtered by pool type. If the asset registry is not yet synced, it calls `syncRegistry` first ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=async%20getPools%28includeOnly%3A%20PoolType%5B%5D%29%3A%20Promise)). It then queries each specific pool client for its pools: if `includeOnly` is empty, all supported pool types are fetched, otherwise only those matching the types in `includeOnly`. Results from all clients are concatenated into one array ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=const%20pools%20%3D%20await%20Promise)). |
| `PoolService.unsubscribe(): void` | Unsubscribes from any active on-chain listeners. Calls the `unsubscribe()` method of each internal pool client (XYK, Omni, LBP, Stable) to stop their event updates or polling ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=unsubscribe%28%29%20)). This is typically used to clean up subscriptions when the service is no longer needed. |
| `PoolService.getPoolFees(poolPair: PoolPair, pool: Pool): Promise<PoolFees>` | Retrieves the fee structure for a given pool (and specific asset pair within that pool). It dispatches to the appropriate pool client based on the pool’s type: e.g. XYK, Omni, LBP, or StableSwap, and returns that pool’s swap fee info ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=case%20PoolType)) ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=return%20this)). If the pool type is unrecognized, it throws a `PoolNotFound` error. |
| `PoolService.buildBuyTx(assetIn: string, assetOut: string, amountOut: BigNumber, maxAmountIn: BigNumber, route: Hop[]): Transaction` | Constructs an unsigned extrinsic (transaction) to perform an on-chain *buy* trade (spend up to `maxAmountIn` of `assetIn` to buy `amountOut` of `assetOut`). If the trade is a direct Omnipool swap (single hop in the Omnipool), it uses the dedicated `omnipool.buy` extrinsic for efficiency (bypassing the router) ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=%2F%2F%20In%20case%20of%20direct,cheaper%20tx)). Otherwise, it uses the generalized `router.buy` extrinsic with the encoded multihop `route` ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=tx%20%3D%20this)). Returns a `Transaction` object containing the extrinsic’s hex representation and a helper to get the actual `SubmittableExtrinsic` ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=const%20getTx%20%3D%20,)). |
| `PoolService.buildSellTx(assetIn: string, assetOut: string, amountIn: BigNumber, minAmountOut: BigNumber, route: Hop[]): Transaction` | Constructs an unsigned extrinsic to perform an on-chain *sell* trade (sell `amountIn` of `assetIn` for at least `minAmountOut` of `assetOut`). If the trade is a direct one-hop in Omnipool, it calls `omnipool.sell` ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=%2F%2F%20In%20case%20of%20direct,cheaper%20tx)); otherwise it calls `router.sell` with the provided route hops ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=tx%20%3D%20this)). The returned `Transaction` object (with name `RouterSell`) contains the extrinsic data ready for signing/submission ([sdk/packages/sdk/src/pool/PoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolService.ts#:~:text=match%20at%20L919%20return%20,as%20Transaction)). |
| `CachingPoolService.getPoolFees(poolPair: PoolPair, pool: Pool): Promise<PoolFees>` | Provides a cached version of `getPoolFees`. It first computes a cache key from the pool and asset pair. If fees for that key are present in the LRU cache, it returns them immediately; if not, it calls the underlying `PoolService.getPoolFees` to fetch from chain, stores the result in the cache, and then returns it ([sdk/packages/sdk/src/pool/CachingPoolService.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/CachingPoolService.ts#:~:text=async%20getPoolFees,PoolFees%3E)). |
| `PoolFactory.get(pool: PoolBase): Pool` | **Static Method** – Creates a specific pool instance from a generic `PoolBase` description. Depending on `pool.type`, it will instantiate and return an `XykPool`, `OmniPool`, `LbpPool`, or `StableSwap` object initialized with that pool’s data ([sdk/packages/sdk/src/pool/PoolFactory.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolFactory.ts#:~:text=switch%20%28pool.type%29%20)). (If the pool type is not supported, an error is thrown.) |
| `XykPool.fromPool(pool: PoolBase): XykPool` | **Static Method** – Constructs an `XykPool` instance from a generic pool definition. Initializes a new XYK pool object with the pool’s address, tokens, and trading limits (max in/out ratios, min trading amount) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=minTradingLimit%3A%20number%3B)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=pool)). |
| `XykPool.validatePair(tokenIn: string, tokenOut: string): boolean` | Checks if the given token pair can trade in this pool. For XYK pools this always returns `true` (any two tokens in the same XYK pool are swappable) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=validatePair,)). |
| `XykPool.parsePair(tokenIn: string, tokenOut: string): PoolPair` | Looks up the pool’s token metadata for `tokenIn` and `tokenOut` and returns a structured `PoolPair` object containing the balances, decimals, and existential deposits for each, as well as their IDs ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=parsePair,)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=const%20balanceIn%20%3D%20bnum%28tokenInMeta)). Throws an error if either token is not part of this pool. |
| `XykPool.validateAndBuy(poolPair: PoolPair, amountOut: BigNumber, fees: XykPoolFees): BuyTransfer` | Given a desired output amount (`amountOut`) for a buy trade, computes the required input amount and fees in an XYK pool. It uses the constant-product formula to calculate `calculateInGivenOut` (the amount of input needed for the output) then computes the trading fee on that input ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=const%20calculatedIn%20%3D%20this)). The sum (`amountIn = requiredInput + fee`) is returned in a `BuyTransfer` object along with the fee and percentage fee (`feePct`), and any applicable warnings (e.g. if trade volume is below minimum or triggers existential deposit) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=validateAndBuy)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=const%20fee%20%3D%20this)). |
| `XykPool.validateAndSell(poolPair: PoolPair, amountIn: BigNumber, fees: XykPoolFees): SellTransfer` | Given an input amount for a sell trade, computes the resulting output and fees in the pool. It calculates `calculateOutGivenIn` (output for the given input) and the fee on that input, then subtracts the fee to determine the net output. The result is returned as a `SellTransfer` (including fee and any errors if applicable). (Implementation is analogous to `validateAndBuy`, but for sell-side calculations.) |
| `XykPool.calculateInGivenOut(poolPair: PoolPair, amountOut: BigNumber): BigNumber` | Computes how much `assetIn` is required to get `amountOut` of `assetOut` in this XYK pool, using the constant product formula. Internally calls `XykMath.calculateInGivenOut` with the pool’s balances and `amountOut`, and converts the result to a BigNumber. If the formula yields a negative value (insufficient liquidity), it returns 0 instead ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=calculateInGivenOut,)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=)). |
| `XykPool.calculateOutGivenIn(poolPair: PoolPair, amountIn: BigNumber): BigNumber` | Computes how much `assetOut` can be obtained by selling `amountIn` of `assetIn`, using the XYK invariant formula. Internally uses `XykMath.calculateOutGivenIn` with the pool’s balances and `amountIn`, and wraps the result as a BigNumber (returning 0 if the result would be negative) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=calculateOutGivenIn,)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=)). |
| `XykPool.spotPriceInGivenOut(poolPair: PoolPair): BigNumber` | Returns the spot price of `assetIn` in terms of `assetOut` for this pool (price for an infinitesimal buy). It calls `XykMath.calculateSpotPrice(balanceOut, balanceIn)` – essentially the ratio of reserve balances – and scales it by `10^(18 - decimalsOut)` to adjust to a standardized decimal base ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=spotPriceInGivenOut%28poolPair%3A%20PoolPair%29%3A%20BigNumber%20)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=const%20base%20%3D%20scale,decimalsOut)), then converts to BigNumber. |
| `XykPool.spotPriceOutGivenIn(poolPair: PoolPair): BigNumber` | Returns the spot price of `assetOut` in terms of `assetIn` (price for an infinitesimal sell). It uses `XykMath.calculateSpotPrice(balanceIn, balanceOut)` and scales by `10^(18 - decimalsIn)` ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=spotPriceOutGivenIn%28poolPair%3A%20PoolPair%29%3A%20BigNumber%20)) ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=const%20base%20%3D%20scale,decimalsIn)) to get a BigNumber quote. (In an XYK pool, `spotPriceOutGivenIn` is the reciprocal of `spotPriceInGivenOut`, after adjusting for asset decimals.) |
| `XykPool.calculateTradeFee(amount: BigNumber, fees: XykPoolFees): BigNumber` | Calculates the fee amount to charge for a trade of size `amount` in this pool. It uses the pool’s fee rates (numerator/denominator) via `XykMath.calculatePoolTradeFee` ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=calculateTradeFee,)) and returns the result as a BigNumber ([sdk/packages/sdk/src/pool/xyk/XykPool.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykPool.ts#:~:text=)). (For XYK pools, this is typically a simple percentage of the trade amount.) |
| `OmniPool.fromPool(pool: OmniPoolBase): OmniPool` | **Static Method** – Constructs an `OmniPool` instance from base pool data ([sdk/packages/sdk/src/pool/PoolFactory.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolFactory.ts#:~:text=return%20XykPool)). (Omnipool is a specialized multi-asset pool where all assets trade against a common hub asset.) This sets up the pool’s properties including its asset list and trading limits specific to Omnipool. |
| `OmniPool.validatePair(tokenIn: string, tokenOut: string): boolean` | Determines if a given token pair can be traded in the Omnipool. In an Omnipool, any asset can be swapped with any other via the hub asset, so this typically returns `true` for any two distinct tokens in the pool. (Trades might be 1-hop if one token is the hub asset, or 2-hop through the hub otherwise.) |
| `OmniPool.parsePair(tokenIn: string, tokenOut: string): PoolPair` | Prepares a `PoolPair` structure for the given token pair in the Omnipool. Looks up the balances and metadata for `tokenIn` and `tokenOut` in this multi-asset pool, and returns their balances, decimals, etc., packaged in a `PoolPair`. It will throw an error if either asset is not in the Omnipool. |
| `OmniPool.validateAndBuy(poolPair: PoolPair, amountOut: BigNumber, fees: OmniPoolFees): BuyTransfer` | Calculates the required input and fee for a desired `amountOut` in an Omnipool trade. Uses the Omnipool’s pricing formula (which may account for factors like the hub asset’s price impact and any dynamic fees) to determine how much of `assetIn` is needed, then computes the fee. Returns a `BuyTransfer` with the total `amountIn`, fee, and effective fee percentage. (If the trade violates any constraints, relevant error flags will be included in the transfer object.) |
| `OmniPool.validateAndSell(poolPair: PoolPair, amountIn: BigNumber, fees: OmniPoolFees): SellTransfer` | Computes the output and fee for selling `amountIn` of an asset into another via the Omnipool. It applies the Omnipool’s swap formula to find `assetOut` amount for the given input, then applies the pool’s fee. Returns a `SellTransfer` containing the output amount (net of fees) along with the fee and any warnings (e.g. minimal trade or liquidity limits). |
| `OmniPool.calculateInGivenOut(poolPair: PoolPair, amountOut: BigNumber): BigNumber` | Omnipool-specific formula to compute required input for a desired output. Likely considers the two-step route through the hub asset: effectively calculating input->hub and hub->output internally. Returns the BigNumber amount of `assetIn` needed for the `amountOut` of `assetOut`, according to the Omnipool’s invariant. |
| `OmniPool.calculateOutGivenIn(poolPair: PoolPair, amountIn: BigNumber): BigNumber` | Computes the output obtainable in the Omnipool for a given input amount. This uses the pool’s multi-asset pricing model (converting `assetIn` to the hub asset, then to `assetOut`). Returns the BigNumber amount of `assetOut` that would result from swapping `amountIn` of `assetIn`. |
| `OmniPool.spotPriceInGivenOut(poolPair: PoolPair): BigNumber` | Returns the current spot price of `assetIn` in terms of `assetOut` within the Omnipool (for an infinitesimally small buy). Because Omnipool trades go through the hub, this price reflects the ratio of their prices against the hub asset. It’s typically derived from the pool’s reserve ratios and any price adjustment mechanisms of the Omnipool. |
| `OmniPool.spotPriceOutGivenIn(poolPair: PoolPair): BigNumber` | Returns the spot price of `assetOut` in terms of `assetIn` (infinitesimal sell price) in the Omnipool. This is essentially the inverse of the buy-side spot price, accounting for the hub asset conversion. |
| `OmniPool.calculateTradeFee(amount: BigNumber, fees: OmniPoolFees): BigNumber` | Calculates the fee for a trade of size `amount` in the Omnipool. This may include dynamic fees unique to Omnipool (e.g., fees that depend on the pool’s state like a sliding scale). Returns the fee amount as a BigNumber. |
| `LbpPool.fromPool(pool: LbpPoolBase): LbpPool` | **Static Method** – Creates an `LbpPool` (Liquidity Bootstrapping Pool) instance from the given base data ([sdk/packages/sdk/src/pool/PoolFactory.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolFactory.ts#:~:text=return%20XykPool)). It initializes the pool’s token list and parameters such as the initial and final token weights or any fee settings specific to LBP. |
| `LbpPool.validatePair(tokenIn: string, tokenOut: string): boolean` | Checks if `tokenIn` and `tokenOut` can trade in this LBP. (Since an LBP is a two-token pool like XYK, any pair consisting of the two pool tokens should be valid for swap, so this typically returns true as long as the tokens match the pool’s two assets.) |
| `LbpPool.parsePair(tokenIn: string, tokenOut: string): PoolPair` | Returns the `PoolPair` info (balances, decimals, etc.) for the given token pair in the LBP. It ensures the pair matches the pool’s two tokens and fetches their latest balances and metadata, packaging them into a `PoolPair`. |
| `LbpPool.validateAndBuy(poolPair: PoolPair, amountOut: BigNumber, fees: LbpPoolFees): BuyTransfer` | Computes the required input to buy `amountOut` in an LBP, taking into account the pool’s changing weights. Uses the LBP formula (which adjusts the constant product formula by the token weight differential) to find how much `assetIn` is needed and calculates the fee. Returns a `BuyTransfer` with `amountIn` and fee details. If the amount is too large relative to pool reserves or other limits, the transfer object will reflect that (e.g. via error flags). |
| `LbpPool.validateAndSell(poolPair: PoolPair, amountIn: BigNumber, fees: LbpPoolFees): SellTransfer` | Computes the output for selling `amountIn` in the LBP, considering the current token weights. It calculates the `assetOut` using the weighted pricing formula and then applies the pool’s fee. The result is provided as a `SellTransfer` (net output, fee, etc.), with any constraints (like minimum trade size) noted. |
| `LbpPool.calculateInGivenOut(poolPair: PoolPair, amountOut: BigNumber): BigNumber` | Calculates the required input for a desired output in the LBP, using the pool’s current weights and reserves. This function calls the LBP math routine to account for how the weight shift impacts the price, returning the BigNumber input amount needed. |
| `LbpPool.calculateOutGivenIn(poolPair: PoolPair, amountIn: BigNumber): BigNumber` | Calculates the output obtainable for a given input in the LBP, based on the pool’s invariant and token weights at the current moment. Returns the BigNumber amount of `assetOut` corresponding to the `amountIn`. |
| `LbpPool.spotPriceInGivenOut(poolPair: PoolPair): BigNumber` | Returns the instantaneous price of `assetIn` in terms of `assetOut` in the LBP, reflecting the current weights. (As LBPs have time-varying weights, this spot price changes over time; this call gives the price at the current state.) |
| `LbpPool.spotPriceOutGivenIn(poolPair: PoolPair): BigNumber` | Returns the instantaneous price of `assetOut` in terms of `assetIn` for the LBP (the inverse of the above spot price, under current pool conditions). |
| `LbpPool.calculateTradeFee(amount: BigNumber, fees: LbpPoolFees): BigNumber` | Calculates the fee for a trade of size `amount` in the LBP. This typically applies the pool’s set fee percentage to the trade amount (LBP fees are usually a fixed percentage like in XYK). Returns the fee as a BigNumber. |
| `StableSwap.fromPool(pool: StableSwapBase): StableSwap` | **Static Method** – Initializes a `StableSwap` pool instance from base data ([sdk/packages/sdk/src/pool/PoolFactory.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/PoolFactory.ts#:~:text=return%20XykPool)). A StableSwap pool contains typically multiple assets with an amplification parameter; this method sets up the pool’s properties (tokens, AMP factor, etc.) for stable swap calculations. |
| `StableSwap.validatePair(tokenIn: string, tokenOut: string): boolean` | Checks if the given token pair can be traded in this StableSwap pool. (In a stable swap pool with N assets, any two distinct assets in the pool are swappable, so this returns true if both tokens are in the pool.) |
| `StableSwap.parsePair(tokenIn: string, tokenOut: string): PoolPair` | Prepares the `PoolPair` information for a swap between `tokenIn` and `tokenOut` in the stable pool. It fetches the current balances and metadata for those two assets from the pool and returns them in a `PoolPair` structure (along with common pool parameters like amplification factor if needed for calculations). |
| `StableSwap.validateAndBuy(poolPair: PoolPair, amountOut: BigNumber, fees: StableSwapFees): BuyTransfer` | Computes the required input to obtain `amountOut` in a stable swap pool. It uses the stable-swap invariant (e.g., Curve’s or Balancer’s stable swap formula with the amplification factor) to determine the necessary `assetIn` and then adds the protocol fee. Returns a `BuyTransfer` with the total `amountIn` needed and the fee breakdown. |
| `StableSwap.validateAndSell(poolPair: PoolPair, amountIn: BigNumber, fees: StableSwapFees): SellTransfer` | Computes the output for selling `amountIn` of one asset into another within the stable pool. It applies the stable swap pricing formula to find the `assetOut` amount, then subtracts the swap fee. The result is provided in a `SellTransfer` (including the fee and any notes on pool limits if applicable). |
| `StableSwap.calculateInGivenOut(poolPair: PoolPair, amountOut: BigNumber): BigNumber` | Uses the stable swap invariant formula to compute how much input is required for a given `amountOut`. This calculation takes into account the pool’s amplification factor and the balances of all assets in the pool (since stable swap pools maintain an invariant involving all reserves). Returns the BigNumber input amount needed. |
| `StableSwap.calculateOutGivenIn(poolPair: PoolPair, amountIn: BigNumber): BigNumber` | Calculates the output amount for a given input in the stable pool, using the pool’s invariant. It determines how the input trade will shift the balances and uses the AMP (amplification) factor to compute the resulting `assetOut` amount. The result is returned as a BigNumber. |
| `StableSwap.spotPriceInGivenOut(poolPair: PoolPair): BigNumber` | Returns the current marginal price of `assetIn` in terms of `assetOut` in the stable pool. This is derived from the derivative of the pool’s invariant at the current balance point – effectively reflecting how a tiny increase in `assetOut` would affect `assetIn`. |
| `StableSwap.spotPriceOutGivenIn(poolPair: PoolPair): BigNumber` | Returns the marginal price of `assetOut` in terms of `assetIn` for the stable pool (the reciprocal of the above spot price, under current pool conditions). |
| `StableSwap.calculateTradeFee(amount: BigNumber, fees: StableSwapFees): BigNumber` | Computes the swap fee for a trade of size `amount` in the stable pool. Typically, stable pools also charge a fixed percentage fee; this function applies that to the trade amount (the amplification doesn’t directly affect percentage fee calculation). Returns the fee amount as a BigNumber. |
| `XykMath.getSpotPrice(balanceA: string, balanceB: string, amount: string): string` | Computes the spot price given reserves `balanceA` and `balanceB` and a trade `amount`, via the XYK formula. (This likely multiplies `amount` by `balanceB/balanceA` – effectively price = amount * (B/A).) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20getSpotPrice)) It’s used to estimate price impact for a given trade amount in an XYK pool. |
| `XykMath.calculateInGivenOut(balanceIn: string, balanceOut: string, amountOut: string): string` | Constant-product formula to calculate the input required for a desired output. Based on reserves `balanceIn` (of input asset) and `balanceOut` (of output asset), it returns the input amount as a string. Internally, this likely uses `amountIn = ((balanceIn * amountOut) / (balanceOut - amountOut))` (the rearranged XYK invariant) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateInGivenOut)) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=return%20calculate_in_given_out)). |
| `XykMath.calculateOutGivenIn(balanceIn: string, balanceOut: string, amountIn: string): string` | Constant-product formula to calculate the output given a certain input. Using reserves `balanceIn` and `balanceOut`, it returns the output amount as a string, likely computed as `amountOut = (balanceOut * amountIn) / (balanceIn + amountIn)` ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateOutGivenIn)). |
| `XykMath.calculatePoolTradeFee(amount: string, feeNumerator: number, feeDenominator: number): string` | Calculates the fee to charge for a trade of size `amount` with a given fee rate (numerator/denominator). For example, for a fee rate of 3/1000, it will return `amount * 3/1000` as a string ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculatePoolTradeFee)). |
| `XykMath.calculateLiquidityIn(reserveA: string, reserveB: string, amountA: string): string` | Given adding `amountA` of asset A to the pool with reserves `reserveA` and `reserveB`, computes how much of asset B would be required to maintain the price (used when adding liquidity symmetrically, perhaps). Returns the required B amount as a string ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateLiquidityIn)) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=return%20calculate_liquidity_in)). |
| `XykMath.calculateSpotPrice(balanceA: string, balanceB: string): string` | Returns the spot price (ratio) of two reserves without trade amount (i.e., infinitesimal price). Essentially `balanceA / balanceB` (or vice versa, depending on convention) returned as string ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=)). |
| `XykMath.calculateSpotPriceWithFee(balanceA: string, balanceB: string, feeNumerator: string, feeDenominator: string): string` | Similar to `calculateSpotPrice`, but adjusts the price to include the pool’s fee. This effectively increases the price a trader pays by the fee percentage ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateSpotPriceWithFee)) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=%29%3A%20string%20)). |
| `XykMath.calculateShares(reserveA: string, amountA: string, totalShares: string): string` | Calculates how many liquidity shares to mint when adding `amountA` of asset A to a pool with reserve A and given `totalShares`. (In XYK pools, liquidity shares are proportional to the deposit relative to reserves.) Returns the new share amount as string ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateShares)). |
| `XykMath.calculateLiquidityOutAssetA(reserveA: string, reserveB: string, shares: string, totalShares: string): string` | Calculates the amount of asset A that would be withdrawn when redeeming a certain number of liquidity `shares` from a pool (with reserves A, B and `totalShares`). This uses the share of the pool represented by `shares` to compute asset A output ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=static%20calculateLiquidityOutAssetA)) ([sdk/packages/sdk/src/pool/xyk/XykMath.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/pool/xyk/XykMath.ts#:~:text=%29%3A%20string%20)). |
| `XykMath.calculateLiquidityOutAssetB(reserveA: string, reserveB: string, shares: string, totalShares: string): string` | Calculates the amount of asset B obtained when redeeming a given `shares` portion of the liquidity. Similar to the above, it returns the proportional amount of asset B reserves as a string. |
| `OmniMath.calculateInGivenOut(...)` | (Multiple functions in **OmniMath** class provide Omnipool-specific calculations, likely mirroring the XYK functions but adjusted for Omnipool’s pooled design. For example, functions to compute input/output considering the hub asset and possibly liquidity depth adjustments.) **Example:** Omnipool’s math would handle multi-hop conversions via the hub asset and may include a “price adjustment” factor to protect the pool. |
| `OmniMath.calculateOutGivenIn(...)` | (See above – computes output for a given input in Omnipool context, as a string. Relies on the Omnipool’s invariant, which differs from simple XYK since all assets share one pool.) |
| `OmniMath.calculateSpotPrice(...)\`, `OmniMath.calculateTradeFee(...), etc.` | (Provides spot price and fee calculations for Omnipool swaps. The spot price functions consider the marginal rate for swapping one asset to another through the hub, and the fee function might incorporate Omnipool’s dynamic fee model if one exists.) |
| `LbpMath.calculateInGivenOut(...)` | (Multiple functions in **LbpMath** for LBP pools, analogous to XYKMath but incorporating time-varying weights. For instance, calculating input for output takes into account the current relative weights of the two tokens.) These methods ensure that as the weights shift, the pricing reflects that change. |
| `LbpMath.calculateOutGivenIn(...)`, `LbpMath.calculateSpotPrice(...), etc.` | (LBP math functions to compute outputs, spot prices, and maybe weight adjustments. E.g., spot price will be a function of the current weight ratio times the XYK-like price.) All results are returned as strings representing the precise values under the LBP’s formula. |
| `StableMath.calculateInGivenOut(...)` | (Multiple functions in **StableMath** implementing the stable-swap invariant. For example, input for output requires solving the curve’s equation given the AMP factor.) These functions internally likely use iterative or analytical solutions provided by the underlying `math-stableswap` library to return amounts as strings. |
| `StableMath.calculateOutGivenIn(...)`, `StableMath.calculateSpotPrice(...), etc.` | (StableMath provides output, spot price, and possibly invariant calculation for stable pools. Spot price, for instance, would reflect the pool’s slippage at equilibrium – often near 1:1 for similar assets. All outputs are formatted as strings for consistency.) |
| `AssetClient.getOnChainAssets(includeInvalid?: boolean, external?: ExternalAsset[]): Promise<Asset[]>` | Fetches all asset metadata from the chain’s asset registry and returns them as an array of `Asset` objects. It pulls asset definitions, locations, and additional metadata (including special cases for liquidity pool shares and bonds) in parallel ([sdk/packages/sdk/src/client/AssetClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/AssetClient.ts#:~:text=const%20,)) ([sdk/packages/sdk/src/client/AssetClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/AssetClient.ts#:~:text=switch%20%28assetType.toString%28%29%29%20)). It filters out unsupported asset types and, unless `includeInvalid` is true, also filters out any assets with invalid metadata (e.g., missing symbols or negative decimals) ([sdk/packages/sdk/src/client/AssetClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/AssetClient.ts#:~:text=return%20includeInvalid)). External assets provided can be merged to augment the on-chain data. |
| `BalanceClient.getBalance(account: string, assetId: string): Promise<BigNumber>` | Retrieves the balance of a given asset for the specified account. It determines the asset type from the asset registry and queries the appropriate pallet (system account for native tokens, or asset pallet for others) to get the free balance ([sdk/packages/sdk/src/client/BalanceClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/BalanceClient.ts#:~:text=async%20getBalance,BigNumber%3E)). Returns the balance as a BigNumber (typically representing the base unit amount). |
| `BalanceClient.subscribeSystemBalance(address: string): UnsubscribePromise` | Subscribes to the native token balance of an `address`. It listens to the chain’s `system.account` storage for the free balance, invoking a callback on changes ([sdk/packages/sdk/src/client/BalanceClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/BalanceClient.ts#:~:text=async%20subscribeSystemBalance)). Returns an `UnsubscribePromise` which can be called to cancel the subscription. |
| `BalanceClient.subscribeTokenBalance(address: string): UnsubscribePromise` | Subscribes to all non-native, non-ERC20 asset balances of the given address. It filters the asset list to supported assets (excluding ERC20 tokens) and monitors their balances (likely via the assets pallet or ORML tokens), triggering updates on any change ([sdk/packages/sdk/src/client/BalanceClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/BalanceClient.ts#:~:text=async%20subscribeTokenBalance)). Returns an unsubscribe handle to stop the updates. |
| `BalanceClient.subscribeErc20Balance(address: string): UnsubscribePromise` | Subscribes to all ERC-20 asset balances for the address. Because ERC-20 assets might not have a pallet event for balance changes, this uses a block subscription (`chain.subscribeNewHeads`) and periodically checks ERC-20 token balances ([sdk/packages/sdk/src/client/BalanceClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/BalanceClient.ts#:~:text=async%20subscribeErc20Balance)). The returned `UnsubscribePromise` cancels the subscription. |
| `FarmClient.getFarmApr(id: string, type: 'omnipool' \| 'isolatedpool'): Promise<string>` | Calculates the total APR (Annual Percentage Rate) from liquidity mining (“farm”) programs for a given pool. The `id` can be an Omnipool asset ID or an isolated pool’s address, with `type` indicating which. It fetches the relevant global farm and yield farm data on chain, computes each yield farm’s APR, and sums them up. If the pool is isolated (two-sided), the result is divided by 2 (since APR is split between two assets) ([sdk/packages/sdk/src/client/FarmClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/FarmClient.ts#:~:text=%3A%20apr,times%28100)). Returns the sum of APRs as a string (percentage). |
| `FarmClient.getOraclePrice(globalFarm: PalletLiquidityMiningGlobalFarmData): Promise<BigNumber \| undefined>` | **(Advanced)** Fetches an oracle price used in yield farming reward calculation. Given a global farm’s data, this checks an EMA (exponential moving average) price oracle for the farm’s reward currency vs. the Omnipool’s hub asset ([sdk/packages/sdk/src/client/FarmClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/FarmClient.ts#:~:text=await%20this)) ([sdk/packages/sdk/src/client/FarmClient.ts at master · galacticcouncil/sdk · GitHub](https://github.com/galacticcouncil/sdk/blob/master/packages/sdk/src/client/FarmClient.ts#:~:text=match%20at%20L889%20%28await%20this,)). If an oracle value exists, it returns it as a BigNumber; if not, it returns `undefined` and falls back to using the farm’s internal `priceAdjustment`. (This is used internally to help compute accurate APRs.) |

